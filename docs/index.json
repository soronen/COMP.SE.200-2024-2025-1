{
  "stats": {
    "suites": 29,
    "tests": 174,
    "passes": 155,
    "pending": 0,
    "failures": 19,
    "start": "2024-12-05T16:50:26.896Z",
    "end": "2024-12-05T16:50:26.944Z",
    "duration": 48,
    "testsRegistered": 174,
    "passPercent": 89.08045977011494,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b5879309-8f90-43c1-acbc-4960b1d579ff",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "81f5f895-2069-41a9-810a-4b376c0433ec",
          "title": "add",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "adds two positive numbers",
              "fullTitle": "add adds two positive numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, 4)).to.equal(10)",
              "err": {},
              "uuid": "86677e2b-e9b5-42eb-a5b1-3ac6c546ce46",
              "parentUUID": "81f5f895-2069-41a9-810a-4b376c0433ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adds two negative numbers",
              "fullTitle": "add adds two negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-6, -4)).to.equal(-10)",
              "err": {},
              "uuid": "0f2739e5-1ef2-4f14-9e46-f81765b54a9e",
              "parentUUID": "81f5f895-2069-41a9-810a-4b376c0433ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adds two floating point numbers",
              "fullTitle": "add adds two floating point numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6.1, 4.2)).to.be.closeTo(10.3, 0.0001)",
              "err": {},
              "uuid": "895b5300-777e-46b5-8111-db5da45fcf1a",
              "parentUUID": "81f5f895-2069-41a9-810a-4b376c0433ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adds two numbers in scientific notation",
              "fullTitle": "add adds two numbers in scientific notation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6e2, 4e3)).to.equal(4600)",
              "err": {},
              "uuid": "12f5f873-6c45-48be-a24d-e93d015e19e4",
              "parentUUID": "81f5f895-2069-41a9-810a-4b376c0433ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns the other value if one number is NaN",
              "fullTitle": "add returns the other value if one number is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, NaN)).to.deep.equal(NaN)",
              "err": {},
              "uuid": "69331987-2b10-4b15-97de-c68ec11517bd",
              "parentUUID": "81f5f895-2069-41a9-810a-4b376c0433ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86677e2b-e9b5-42eb-a5b1-3ac6c546ce46",
            "0f2739e5-1ef2-4f14-9e46-f81765b54a9e",
            "895b5300-777e-46b5-8111-db5da45fcf1a",
            "12f5f873-6c45-48be-a24d-e93d015e19e4",
            "69331987-2b10-4b15-97de-c68ec11517bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b258c94d-8e1c-4567-8b37-eccf953e5276",
          "title": "at",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\at.test.js",
          "file": "\\test\\at.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Retrieves corret value from spacified path",
              "fullTitle": "at Retrieves corret value from spacified path",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(at(object, ['a[1]'])).to.deep.equal([4])",
              "err": {},
              "uuid": "85e4c1d6-2b20-483e-96ab-f8530d8cd217",
              "parentUUID": "b258c94d-8e1c-4567-8b37-eccf953e5276",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieves corret values from multiple spacified paths",
              "fullTitle": "at Retrieves corret values from multiple spacified paths",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(at(object, ['a[0].b.c', 'a[1]'])).to.deep.equal([3, 4])",
              "err": {},
              "uuid": "493d51b1-6331-405a-b5c1-298a07cf26be",
              "parentUUID": "b258c94d-8e1c-4567-8b37-eccf953e5276",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Correctly handles deeply nested paths",
              "fullTitle": "at Correctly handles deeply nested paths",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(at(object, ['a[0].b.c'])).to.deep.equal([3]);",
              "err": {},
              "uuid": "14539c4b-eff7-433f-ba44-5b48d058975c",
              "parentUUID": "b258c94d-8e1c-4567-8b37-eccf953e5276",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieves undefined from undefined path",
              "fullTitle": "at Retrieves undefined from undefined path",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(at(object, ['a[2]'])).to.deep.equal([undefined])",
              "err": {},
              "uuid": "641e45c4-f45b-4891-a4d7-d48da2b25a7f",
              "parentUUID": "b258c94d-8e1c-4567-8b37-eccf953e5276",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieves undefined from null object",
              "fullTitle": "at Retrieves undefined from null object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(at(null, ['a[1]'])).to.deep.equal([undefined])",
              "err": {},
              "uuid": "69db634e-fcc7-4d73-a278-807f3f221a68",
              "parentUUID": "b258c94d-8e1c-4567-8b37-eccf953e5276",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns empty array from object if no paths given",
              "fullTitle": "at Returns empty array from object if no paths given",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(at(object)).to.deep.equal([])",
              "err": {},
              "uuid": "29301e17-f00a-42c0-b277-ebe2452d0f98",
              "parentUUID": "b258c94d-8e1c-4567-8b37-eccf953e5276",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns empty array from wrong object",
              "fullTitle": "at Returns empty array from wrong object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(at('a[0].b.c')).to.deep.equal([])",
              "err": {},
              "uuid": "fa150655-bd78-4d8d-9606-08b0e2d395d0",
              "parentUUID": "b258c94d-8e1c-4567-8b37-eccf953e5276",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85e4c1d6-2b20-483e-96ab-f8530d8cd217",
            "493d51b1-6331-405a-b5c1-298a07cf26be",
            "14539c4b-eff7-433f-ba44-5b48d058975c",
            "641e45c4-f45b-4891-a4d7-d48da2b25a7f",
            "69db634e-fcc7-4d73-a278-807f3f221a68",
            "29301e17-f00a-42c0-b277-ebe2452d0f98",
            "fa150655-bd78-4d8d-9606-08b0e2d395d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "23fb51ab-1efc-4efc-84e4-cfb924698721",
          "title": "camelCase",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\camelCase.test.js",
          "file": "\\test\\camelCase.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 'fooBar' from 'Foo Bar'",
              "fullTitle": "camelCase should return 'fooBar' from 'Foo Bar'",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = camelCase(\"Foo Bar\");\nexpect(result).to.equal(\"fooBar\");",
              "err": {
                "message": "AssertionError: expected ' fooBar' to equal 'fooBar'",
                "estack": "AssertionError: expected ' fooBar' to equal 'fooBar'\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/camelCase.test.js:7:23)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "dbb98b15-76dd-46f3-88db-e7db6c1b0909",
              "parentUUID": "23fb51ab-1efc-4efc-84e4-cfb924698721",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 'fooBar' from '--foo-bar--'",
              "fullTitle": "camelCase should return 'fooBar' from '--foo-bar--'",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = camelCase(\"--foo-bar--\");\nexpect(result).to.equal(\"fooBar\");",
              "err": {
                "message": "AssertionError: expected ' fooBar' to equal 'fooBar'",
                "estack": "AssertionError: expected ' fooBar' to equal 'fooBar'\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/camelCase.test.js:11:23)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "3b2787d7-44e3-4d1d-b6ba-85e93b9eee26",
              "parentUUID": "23fb51ab-1efc-4efc-84e4-cfb924698721",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 'fooBar' from '__FOO_BAR__'",
              "fullTitle": "camelCase should return 'fooBar' from '__FOO_BAR__'",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = camelCase(\"__FOO_BAR__\");\nexpect(result).to.equal(\"fooBar\");",
              "err": {
                "message": "AssertionError: expected ' fooBar' to equal 'fooBar'",
                "estack": "AssertionError: expected ' fooBar' to equal 'fooBar'\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/camelCase.test.js:15:23)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "8c3c4299-31e2-43d5-9bc1-854193ee2457",
              "parentUUID": "23fb51ab-1efc-4efc-84e4-cfb924698721",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dbb98b15-76dd-46f3-88db-e7db6c1b0909",
            "3b2787d7-44e3-4d1d-b6ba-85e93b9eee26",
            "8c3c4299-31e2-43d5-9bc1-854193ee2457"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "86d2543e-6200-4e51-9c14-a51aad006552",
          "title": "capitalize",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\capitalize.test.js",
          "file": "\\test\\capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 'Word' from word",
              "fullTitle": "capitalize should return 'Word' from word",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = capitalize(\"word\");\nexpect(result).to.equal(\"Word\");",
              "err": {},
              "uuid": "a51ad770-b88d-40c1-aabe-5ae77aec407d",
              "parentUUID": "86d2543e-6200-4e51-9c14-a51aad006552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 'Fred' from FRED",
              "fullTitle": "capitalize should return 'Fred' from FRED",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = capitalize(\"FRED\");\nexpect(result).to.equal(\"Fred\");",
              "err": {},
              "uuid": "fef94eeb-3477-402e-ba2a-75bb0247f199",
              "parentUUID": "86d2543e-6200-4e51-9c14-a51aad006552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works on a single word",
              "fullTitle": "capitalize Works on a single word",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('word')).to.equal('Word')",
              "err": {},
              "uuid": "3ec9bd60-f612-40f4-a06d-acb82acc0f1a",
              "parentUUID": "86d2543e-6200-4e51-9c14-a51aad006552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works on two words",
              "fullTitle": "capitalize Works on two words",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('word word')).to.equal('Word word')",
              "err": {},
              "uuid": "4b9373a2-25ca-435b-a6cb-b2384984fee9",
              "parentUUID": "86d2543e-6200-4e51-9c14-a51aad006552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works on an uppercase Word",
              "fullTitle": "capitalize Works on an uppercase Word",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('Word')).to.equal('Word')",
              "err": {},
              "uuid": "9a52cd20-082e-44d3-bf4a-d7662eceb8a4",
              "parentUUID": "86d2543e-6200-4e51-9c14-a51aad006552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works a non ascii character",
              "fullTitle": "capitalize Works a non ascii character",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('ålesund')).to.equal('Ålesund')",
              "err": {},
              "uuid": "2e6e37fa-e64f-4de4-9335-331186925ab4",
              "parentUUID": "86d2543e-6200-4e51-9c14-a51aad006552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Does nothing for chinese characters",
              "fullTitle": "capitalize Does nothing for chinese characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('裁判')).to.equal('裁判')",
              "err": {},
              "uuid": "ccbb6e81-bc49-486d-87a3-15b1eace89c1",
              "parentUUID": "86d2543e-6200-4e51-9c14-a51aad006552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Does nothing for numbers",
              "fullTitle": "capitalize Does nothing for numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('42')).to.equal('42')",
              "err": {},
              "uuid": "632e3c4a-8796-43d2-9e13-b5f9910fcade",
              "parentUUID": "86d2543e-6200-4e51-9c14-a51aad006552",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a51ad770-b88d-40c1-aabe-5ae77aec407d",
            "fef94eeb-3477-402e-ba2a-75bb0247f199",
            "3ec9bd60-f612-40f4-a06d-acb82acc0f1a",
            "4b9373a2-25ca-435b-a6cb-b2384984fee9",
            "9a52cd20-082e-44d3-bf4a-d7662eceb8a4",
            "2e6e37fa-e64f-4de4-9335-331186925ab4",
            "ccbb6e81-bc49-486d-87a3-15b1eace89c1",
            "632e3c4a-8796-43d2-9e13-b5f9910fcade"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "83d88586-5fde-4d71-a9df-a8602d3a83da",
          "title": "castArray",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\castArray.test.js",
          "file": "\\test\\castArray.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return [1] for 1",
              "fullTitle": "castArray Should return [1] for 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(castArray(1)).to.deep.equal([1])",
              "err": {},
              "uuid": "d6031d21-249c-4825-a98a-bbaf35509f2a",
              "parentUUID": "83d88586-5fde-4d71-a9df-a8602d3a83da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return [{ 'a': 1 }] for { 'a': 1 }",
              "fullTitle": "castArray Should return [{ 'a': 1 }] for { 'a': 1 }",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(castArray({ 'a': 1 })).to.deep.equal([{ 'a': 1 }])",
              "err": {},
              "uuid": "c746fede-2528-4ff7-964a-8434b0384dc2",
              "parentUUID": "83d88586-5fde-4d71-a9df-a8602d3a83da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return ['abc'] for 'abc'",
              "fullTitle": "castArray Should return ['abc'] for 'abc'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(castArray('abc')).to.deep.equal(['abc'])",
              "err": {},
              "uuid": "2307346c-c264-41f1-8b12-867e6cd0d9d4",
              "parentUUID": "83d88586-5fde-4d71-a9df-a8602d3a83da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return [null] for null",
              "fullTitle": "castArray Should return [null] for null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(castArray(null)).to.deep.equal([null])",
              "err": {},
              "uuid": "d219d3bf-ed17-4bb2-83bb-04f426f78363",
              "parentUUID": "83d88586-5fde-4d71-a9df-a8602d3a83da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return [undefined] for undefined",
              "fullTitle": "castArray Should return [undefined] for undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(castArray(undefined)).to.deep.equal([undefined])",
              "err": {},
              "uuid": "af47ce1a-9630-46e8-b053-902f8eb7d002",
              "parentUUID": "83d88586-5fde-4d71-a9df-a8602d3a83da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array for no arguments",
              "fullTitle": "castArray Should return empty array for no arguments",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(castArray()).to.deep.equal([])",
              "err": {
                "message": "AssertionError: expected [ undefined ] to deeply equal []",
                "estack": "AssertionError: expected [ undefined ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/castArray.test.js:21:33)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- [\n-   [undefined]\n- ]\n+ []\n"
              },
              "uuid": "6e31b362-c280-4349-8316-4dd1bcf20535",
              "parentUUID": "83d88586-5fde-4d71-a9df-a8602d3a83da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return same array that castArray function has get",
              "fullTitle": "castArray Should return same array that castArray function has get",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3]\nexpect(castArray(array)).to.equal(array)",
              "err": {},
              "uuid": "127e419f-fe00-46a4-9289-dffc9414a582",
              "parentUUID": "83d88586-5fde-4d71-a9df-a8602d3a83da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6031d21-249c-4825-a98a-bbaf35509f2a",
            "c746fede-2528-4ff7-964a-8434b0384dc2",
            "2307346c-c264-41f1-8b12-867e6cd0d9d4",
            "d219d3bf-ed17-4bb2-83bb-04f426f78363",
            "af47ce1a-9630-46e8-b053-902f8eb7d002",
            "127e419f-fe00-46a4-9289-dffc9414a582"
          ],
          "failures": [
            "6e31b362-c280-4349-8316-4dd1bcf20535"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e46ea9d-f087-45da-8f7e-325d88fe5290",
          "title": "ceil",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\ceil.test.js",
          "file": "\\test\\ceil.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 5",
              "fullTitle": "ceil should return 5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(4.006)).to.eql(5)",
              "err": {},
              "uuid": "26a35b69-f6d7-46a2-bc83-25efd23b38cc",
              "parentUUID": "8e46ea9d-f087-45da-8f7e-325d88fe5290",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 6.01",
              "fullTitle": "ceil should return 6.01",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(6.004, 2)).to.eql(6.01)",
              "err": {},
              "uuid": "6bb20def-5519-41a2-9ea3-7a594e8bb494",
              "parentUUID": "8e46ea9d-f087-45da-8f7e-325d88fe5290",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 6100",
              "fullTitle": "ceil should return 6100",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(6040, -2)).to.eql(6100)",
              "err": {},
              "uuid": "8cb6cb7a-6b95-4fab-875e-3763c1020b2f",
              "parentUUID": "8e46ea9d-f087-45da-8f7e-325d88fe5290",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26a35b69-f6d7-46a2-bc83-25efd23b38cc",
            "6bb20def-5519-41a2-9ea3-7a594e8bb494",
            "8cb6cb7a-6b95-4fab-875e-3763c1020b2f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b2ad3c5-8ae5-477e-a293-df02d102d892",
          "title": "chunk",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\chunk.test.js",
          "file": "\\test\\chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should chunk an array without leftovers",
              "fullTitle": "chunk should chunk an array without leftovers",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(chunk(['a', 'b', 'c', 'd'], 2)).to.eql([['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/chunk.test.js:6:47)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "58a9ff8e-e75f-4afb-844f-fe7617359b57",
              "parentUUID": "5b2ad3c5-8ae5-477e-a293-df02d102d892",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should chunk an array with leftovers",
              "fullTitle": "chunk should chunk an array with leftovers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(chunk(['a', 'b', 'c', 'd'], 3)).to.eql([['a', 'b', 'c'], ['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd', undefined, undefined ], …(1) ] to deeply equal [ [ 'a', 'b', 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd', undefined, undefined ], …(1) ] to deeply equal [ [ 'a', 'b', 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/chunk.test.js:9:47)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "02c4ba12-0a8a-4320-93c3-2cb112b3528d",
              "parentUUID": "5b2ad3c5-8ae5-477e-a293-df02d102d892",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should chunk an empty array",
              "fullTitle": "chunk should chunk an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(chunk([], 2)).to.eql([]);",
              "err": {},
              "uuid": "c6fecc33-32fd-492b-9527-070dcfe2ef76",
              "parentUUID": "5b2ad3c5-8ae5-477e-a293-df02d102d892",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6fecc33-32fd-492b-9527-070dcfe2ef76"
          ],
          "failures": [
            "58a9ff8e-e75f-4afb-844f-fe7617359b57",
            "02c4ba12-0a8a-4320-93c3-2cb112b3528d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "696b2c31-3032-45ae-ba28-e6b726a6f7f7",
          "title": "clamp",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\clamp.test.js",
          "file": "\\test\\clamp.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should clamp a number out of bounds",
              "fullTitle": "clamp should clamp a number out of bounds",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(clamp(10, -5, 5)).to.equal(5);\nexpect(clamp(-10, -5, 5)).to.equal(-5);\nexpect(clamp(0, -5, 5)).to.equal(0);",
              "err": {
                "message": "AssertionError: expected -5 to equal 5",
                "estack": "AssertionError: expected -5 to equal 5\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/clamp.test.js:6:33)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- -5\n+ 5\n"
              },
              "uuid": "e6886c84-e728-4656-97fe-d5394713341a",
              "parentUUID": "696b2c31-3032-45ae-ba28-e6b726a6f7f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the number if it is within the bounds",
              "fullTitle": "clamp should return the number if it is within the bounds",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(clamp(3, 1, 5)).to.equal(3);\nexpect(clamp(-3, -5, 0)).to.equal(-3);",
              "err": {
                "message": "AssertionError: expected 1 to equal 3",
                "estack": "AssertionError: expected 1 to equal 3\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/clamp.test.js:12:31)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- 1\n+ 3\n"
              },
              "uuid": "3caa5653-8f72-40fd-a1a5-c1ba168f1cb2",
              "parentUUID": "696b2c31-3032-45ae-ba28-e6b726a6f7f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle cases where lower and upper bounds are the same",
              "fullTitle": "clamp should handle cases where lower and upper bounds are the same",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(clamp(10, 5, 5)).to.equal(5);\nexpect(clamp(-10, -5, -5)).to.equal(-5);",
              "err": {},
              "uuid": "344d0f13-7fa2-41bd-97cf-edc1ca0dddd8",
              "parentUUID": "696b2c31-3032-45ae-ba28-e6b726a6f7f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle cases where the number is NaN",
              "fullTitle": "clamp should handle cases where the number is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(clamp(NaN, -5, 5)).to.be.NaN;",
              "err": {},
              "uuid": "f55e03db-98bb-4b73-8923-fa0f4203c1e7",
              "parentUUID": "696b2c31-3032-45ae-ba28-e6b726a6f7f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "344d0f13-7fa2-41bd-97cf-edc1ca0dddd8",
            "f55e03db-98bb-4b73-8923-fa0f4203c1e7"
          ],
          "failures": [
            "e6886c84-e728-4656-97fe-d5394713341a",
            "3caa5653-8f72-40fd-a1a5-c1ba168f1cb2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "34311e2c-3629-4d86-8702-591656121683",
          "title": "compact",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\compact.test.js",
          "file": "\\test\\compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove falsey values",
              "fullTitle": "compact should remove falsey values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(compact([0, 1, false, 2, '', 3])).to.equal([1, 2, 3])",
              "err": {
                "message": "AssertionError: expected [ 2, 3, '-1': 1 ] to equal [ 1, 2, 3 ]",
                "estack": "AssertionError: expected [ 2, 3, '-1': 1 ] to equal [ 1, 2, 3 ]\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/compact.test.js:6:49)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": " [\n+   1\n   2\n   3\n ]\n"
              },
              "uuid": "78735a93-4201-4ee5-8439-92f7802219c1",
              "parentUUID": "34311e2c-3629-4d86-8702-591656121683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array when given an array filled with falsey values",
              "fullTitle": "compact should return empty array when given an array filled with falsey values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(compact([0, false, '', null, undefined, NaN])).to.deep.equal([])",
              "err": {},
              "uuid": "0e55055a-a952-4d12-870b-bd2a8f5a1446",
              "parentUUID": "34311e2c-3629-4d86-8702-591656121683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array when given an empty array",
              "fullTitle": "compact should return empty array when given an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(compact([])).to.deep.equal([])",
              "err": {},
              "uuid": "761be18c-5911-4962-8725-b4c70ed19787",
              "parentUUID": "34311e2c-3629-4d86-8702-591656121683",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e55055a-a952-4d12-870b-bd2a8f5a1446",
            "761be18c-5911-4962-8725-b4c70ed19787"
          ],
          "failures": [
            "78735a93-4201-4ee5-8439-92f7802219c1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3f79bccd-cfb9-4699-91b4-f8350e65a217",
          "title": "countBy",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\countBy.test.js",
          "file": "\\test\\countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should count correct amount true and false results",
              "fullTitle": "countBy Should count correct amount true and false results",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(countBy(users, value => value.active)).to.deep.equal({ true: 2, false: 1 })",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/countBy.test.js:11:63)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "49305ec3-157d-4b2c-8955-286b2b423ee6",
              "parentUUID": "3f79bccd-cfb9-4699-91b4-f8350e65a217",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should count undefined amount based on amount of users",
              "fullTitle": "countBy Should count undefined amount based on amount of users",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(countBy(users, value => value.undefined)).to.deep.equal({ undefined : 3 })",
              "err": {
                "message": "AssertionError: expected { undefined: 2 } to deeply equal { undefined: 3 }",
                "estack": "AssertionError: expected { undefined: 2 } to deeply equal { undefined: 3 }\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/countBy.test.js:14:66)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": " {\n-   \"undefined\": 2\n+   \"undefined\": 3\n }\n"
              },
              "uuid": "c02749ab-c59d-400c-a7ea-a44e5f5ec9a4",
              "parentUUID": "3f79bccd-cfb9-4699-91b4-f8350e65a217",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array from null object",
              "fullTitle": "countBy Should return empty array from null object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(countBy(null, value => value.active)).to.deep.equal({})",
              "err": {},
              "uuid": "3d090cc3-d7c2-4633-a4ad-0e3d46fbc470",
              "parentUUID": "3f79bccd-cfb9-4699-91b4-f8350e65a217",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array from undefined object",
              "fullTitle": "countBy Should return empty array from undefined object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(countBy(undefined, value => value.active)).to.deep.equal({})",
              "err": {},
              "uuid": "8e97bb04-9a4f-425d-a3d0-40312dc778b5",
              "parentUUID": "3f79bccd-cfb9-4699-91b4-f8350e65a217",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array from empty array",
              "fullTitle": "countBy Should return empty array from empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(countBy({}, value => value.active)).to.deep.equal({})",
              "err": {},
              "uuid": "4d699be8-f33b-4e07-b1a4-5036da1ddfc3",
              "parentUUID": "3f79bccd-cfb9-4699-91b4-f8350e65a217",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d090cc3-d7c2-4633-a4ad-0e3d46fbc470",
            "8e97bb04-9a4f-425d-a3d0-40312dc778b5",
            "4d699be8-f33b-4e07-b1a4-5036da1ddfc3"
          ],
          "failures": [
            "49305ec3-157d-4b2c-8955-286b2b423ee6",
            "c02749ab-c59d-400c-a7ea-a44e5f5ec9a4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "faa9494a-2215-48e5-9aa9-546951462ad6",
          "title": "defaultToAny",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\defaultToAny.test.js",
          "file": "\\test\\defaultToAny.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return first value that is 1",
              "fullTitle": "defaultToAny Should return first value that is 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(1, 10, 20)).to.equal(1)",
              "err": {},
              "uuid": "1eaa417e-28ba-497d-9efd-f50b9b2e0068",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return second value if first is undefined that is 10",
              "fullTitle": "defaultToAny Should return second value if first is undefined that is 10",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, 10, 20)).to.equal(10)",
              "err": {},
              "uuid": "9426a0c2-36d5-427c-b1de-ffe85e7f4dcd",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return third value if first two is undefined that is 20",
              "fullTitle": "defaultToAny Should return third value if first two is undefined that is 20",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, undefined, 20)).to.equal(20)",
              "err": {},
              "uuid": "762756d0-a46a-44d5-84af-eeedf772ad44",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return invalide value if all values are undefined",
              "fullTitle": "defaultToAny Should return invalide value if all values are undefined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, undefined, undefined)).to.NaN",
              "err": {
                "message": "AssertionError: expected undefined to be NaN",
                "estack": "AssertionError: expected undefined to be NaN\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/defaultToAny.test.js:15:65)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": null
              },
              "uuid": "47b271e0-008b-47e9-a0a9-cafb3a70d1cd",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return second value if first is null that is 10",
              "fullTitle": "defaultToAny Should return second value if first is null that is 10",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, 10, 20)).to.equal(10)",
              "err": {},
              "uuid": "7a97bddb-7c62-4edc-9589-b509beec2252",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return second value if first is NaN that is 10",
              "fullTitle": "defaultToAny Should return second value if first is NaN that is 10",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, 10, 20)).to.equal(10)",
              "err": {
                "message": "AssertionError: expected NaN to equal 10",
                "estack": "AssertionError: expected NaN to equal 10\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/defaultToAny.test.js:21:46)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- NaN\n+ 10\n"
              },
              "uuid": "bd95c2f5-c101-4001-a791-f1bb53e0adb3",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return first value that is 1 even if any value later is NaN",
              "fullTitle": "defaultToAny Should return first value that is 1 even if any value later is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(1, NaN, NaN)).to.equal(1)",
              "err": {},
              "uuid": "9deda901-8cf6-44fa-83e5-47ebc48526cd",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return string value correctly",
              "fullTitle": "defaultToAny Should return string value correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny('value1', 'value2', 'value3')).to.equal('value1')",
              "err": {},
              "uuid": "a90a21ce-4baa-416c-b6f8-95b67c2e6051",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return boolean value correctly",
              "fullTitle": "defaultToAny Should return boolean value correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(true, false, true)).to.equal(true)",
              "err": {},
              "uuid": "4719aa0b-3b62-4a73-a89d-6eb3b31e2522",
              "parentUUID": "faa9494a-2215-48e5-9aa9-546951462ad6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1eaa417e-28ba-497d-9efd-f50b9b2e0068",
            "9426a0c2-36d5-427c-b1de-ffe85e7f4dcd",
            "762756d0-a46a-44d5-84af-eeedf772ad44",
            "7a97bddb-7c62-4edc-9589-b509beec2252",
            "9deda901-8cf6-44fa-83e5-47ebc48526cd",
            "a90a21ce-4baa-416c-b6f8-95b67c2e6051",
            "4719aa0b-3b62-4a73-a89d-6eb3b31e2522"
          ],
          "failures": [
            "47b271e0-008b-47e9-a0a9-cafb3a70d1cd",
            "bd95c2f5-c101-4001-a791-f1bb53e0adb3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e50930df-8e90-42a1-b861-b952cd792eca",
          "title": "difference",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\difference.test.js",
          "file": "\\test\\difference.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return one item from array that is not includet in the second array ",
              "fullTitle": "difference Should return one item from array that is not includet in the second array ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference([2, 1], [2, 3])).to.deep.equal([1])",
              "err": {},
              "uuid": "a573dd7b-8af1-4307-99e5-1884e9857979",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if all the items are includet in both arrays ",
              "fullTitle": "difference Should return empty array if all the items are includet in both arrays ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference([2, 3], [2, 3])).to.deep.equal([])",
              "err": {},
              "uuid": "5b987608-0d96-433f-8332-c365abbf7251",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return multiple item from array that is not includet in the second array ",
              "fullTitle": "difference Should return multiple item from array that is not includet in the second array ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference([2, 1, 4, 5], [2, 3])).to.deep.equal([1, 4, 5])",
              "err": {},
              "uuid": "f77aa68b-8dc8-4079-b963-b1c181c3f2ac",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return strings Hello world",
              "fullTitle": "difference Should return strings Hello world",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference(['abc', 'd', 'Hello', 'world'], ['abc', 'd'])).to.deep.equal(['Hello', 'world'])",
              "err": {},
              "uuid": "17449f3b-059a-4df1-ba3f-2eb272788be4",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return array that have null, undefined and NaN",
              "fullTitle": "difference Should return array that have null, undefined and NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference([null, undefined, NaN, 2], [2, 3])).to.deep.equal([null, undefined, NaN])",
              "err": {},
              "uuid": "2e1af026-8baa-401b-aa19-592730d812f6",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if target is null",
              "fullTitle": "difference Should return empty array if target is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference(null, [2, 3])).to.deep.equal([])",
              "err": {},
              "uuid": "74aee8ee-5733-4571-aca8-66e214383677",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if target is undefined",
              "fullTitle": "difference Should return empty array if target is undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference(undefined, [2, 3])).to.deep.equal([])",
              "err": {},
              "uuid": "487e6f66-7e2a-4e41-8e63-096836959422",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if target is undefined",
              "fullTitle": "difference Should return empty array if target is undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference(NaN, [2, 3])).to.deep.equal([])",
              "err": {},
              "uuid": "279d9bc9-8caa-4e00-a1d3-2fc73c16cc1c",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return first array as a whole if values is null",
              "fullTitle": "difference Should return first array as a whole if values is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(difference([2, 1], null)).to.deep.equal([2, 1])",
              "err": {},
              "uuid": "32067cf9-826f-4d78-9dcb-89d63dba6e52",
              "parentUUID": "e50930df-8e90-42a1-b861-b952cd792eca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a573dd7b-8af1-4307-99e5-1884e9857979",
            "5b987608-0d96-433f-8332-c365abbf7251",
            "f77aa68b-8dc8-4079-b963-b1c181c3f2ac",
            "17449f3b-059a-4df1-ba3f-2eb272788be4",
            "2e1af026-8baa-401b-aa19-592730d812f6",
            "74aee8ee-5733-4571-aca8-66e214383677",
            "487e6f66-7e2a-4e41-8e63-096836959422",
            "279d9bc9-8caa-4e00-a1d3-2fc73c16cc1c",
            "32067cf9-826f-4d78-9dcb-89d63dba6e52"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "074f0f54-751d-4f8a-8445-88030fc79faa",
          "title": "divide",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\divide.test.js",
          "file": "\\test\\divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "divides two positive numbers with whole result",
              "fullTitle": "divide divides two positive numbers with whole result",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(50, 10)).to.equal(5)",
              "err": {
                "message": "AssertionError: expected 1 to equal 5",
                "estack": "AssertionError: expected 1 to equal 5\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/divide.test.js:6:31)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- 1\n+ 5\n"
              },
              "uuid": "ac0529c0-fd07-4573-b1f6-2eed4aa9a93a",
              "parentUUID": "074f0f54-751d-4f8a-8445-88030fc79faa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "divides whole numbers with decimal result",
              "fullTitle": "divide divides whole numbers with decimal result",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(50, 11)).to.be.closeTo(4.545, 0.0001)",
              "err": {
                "message": "AssertionError: expected 1 to be close to 4.545 +/- 0.0001",
                "estack": "AssertionError: expected 1 to be close to 4.545 +/- 0.0001\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/divide.test.js:9:34)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": null
              },
              "uuid": "66740bfe-e62f-4e7c-b976-ffb80919fe0c",
              "parentUUID": "074f0f54-751d-4f8a-8445-88030fc79faa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "divides two negative numbers",
              "fullTitle": "divide divides two negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(-50, -5)).to.equal(10)",
              "err": {
                "message": "AssertionError: expected 1 to equal 10",
                "estack": "AssertionError: expected 1 to equal 10\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/divide.test.js:12:32)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- 1\n+ 10\n"
              },
              "uuid": "efd087ff-f2e1-414f-b7be-c90eb3db32dc",
              "parentUUID": "074f0f54-751d-4f8a-8445-88030fc79faa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "divides two numbers with decimals",
              "fullTitle": "divide divides two numbers with decimals",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(7.5, 3.0).to.be.closeTo(2.5, 0.0001))",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'be')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'be')\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/divide.test.js:15:31)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": null
              },
              "uuid": "3d6a6328-035b-43e8-bf0d-874ae027486c",
              "parentUUID": "074f0f54-751d-4f8a-8445-88030fc79faa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "divides two numbers in scientific notation",
              "fullTitle": "divide divides two numbers in scientific notation",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(6e3, 3e1)).to.equal(200)",
              "err": {
                "message": "AssertionError: expected 1 to equal 200",
                "estack": "AssertionError: expected 1 to equal 200\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/divide.test.js:18:33)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- 1\n+ 200\n"
              },
              "uuid": "8007cc6b-daff-4dae-83c9-b358a9b99bfe",
              "parentUUID": "074f0f54-751d-4f8a-8445-88030fc79faa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "doesn't divide by zero",
              "fullTitle": "divide doesn't divide by zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, 0)).to.deep.equal(NaN)",
              "err": {},
              "uuid": "5f968cd0-d1b7-4d62-a053-9732b64f0dc0",
              "parentUUID": "074f0f54-751d-4f8a-8445-88030fc79faa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns NaN if one number is NaN",
              "fullTitle": "divide returns NaN if one number is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, NaN)).to.deep.equal(NaN)",
              "err": {},
              "uuid": "bef05707-90e4-40f7-a17e-9573c8df3043",
              "parentUUID": "074f0f54-751d-4f8a-8445-88030fc79faa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f968cd0-d1b7-4d62-a053-9732b64f0dc0",
            "bef05707-90e4-40f7-a17e-9573c8df3043"
          ],
          "failures": [
            "ac0529c0-fd07-4573-b1f6-2eed4aa9a93a",
            "66740bfe-e62f-4e7c-b976-ffb80919fe0c",
            "efd087ff-f2e1-414f-b7be-c90eb3db32dc",
            "3d6a6328-035b-43e8-bf0d-874ae027486c",
            "8007cc6b-daff-4dae-83c9-b358a9b99bfe"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eca691af-2746-4e4f-afbe-966e2104d2bb",
          "title": "drop",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\drop.test.js",
          "file": "\\test\\drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return second element if not given number of elements to drop",
              "fullTitle": "drop Should return second element if not given number of elements to drop",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([2, 1])).to.deep.equal([1])",
              "err": {},
              "uuid": "a02bbb85-b885-4678-b32c-0a2cb20004e2",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return whole array if number is 0",
              "fullTitle": "drop Should return whole array if number is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([2, 1, 3], 0)).to.deep.equal([2, 1, 3])",
              "err": {},
              "uuid": "b62c5704-1b1d-43b8-8c14-b1c38c2d6d1b",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return last element if array size -1",
              "fullTitle": "drop Should return last element if array size -1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([2, 1, 3], 2)).to.deep.equal([3])",
              "err": {},
              "uuid": "0a05e836-2e6f-4914-89be-339c3838ca3f",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if array size +1",
              "fullTitle": "drop Should return empty array if array size +1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([2, 1, 3], 4)).to.deep.equal([])",
              "err": {},
              "uuid": "e319bdff-dd46-4a0a-b178-fb494080e5f6",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return whole array if number is NaN",
              "fullTitle": "drop Should return whole array if number is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([2, 1, 3], NaN)).to.deep.equal([2, 1, 3])",
              "err": {},
              "uuid": "e3e31b71-2042-4e9b-af58-7866412c8d84",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if array is null",
              "fullTitle": "drop Should return empty array if array is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop(null, 2)).to.deep.equal([])",
              "err": {},
              "uuid": "6a4d0488-c969-4041-8541-ff1dffb79976",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if array is undefined",
              "fullTitle": "drop Should return empty array if array is undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop(undefined, 2)).to.deep.equal([])",
              "err": {},
              "uuid": "250253a1-646d-4409-9ab2-52612e50b5db",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if array is NaN",
              "fullTitle": "drop Should return empty array if array is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop(NaN, 2)).to.deep.equal([])",
              "err": {},
              "uuid": "b0cd1db0-97b6-4525-863d-a94953871bde",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty array if array and number is null",
              "fullTitle": "drop Should return empty array if array and number is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop(null, null)).to.deep.equal([])",
              "err": {},
              "uuid": "ac10c1c3-5331-4692-b826-14c2ff888fc9",
              "parentUUID": "eca691af-2746-4e4f-afbe-966e2104d2bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a02bbb85-b885-4678-b32c-0a2cb20004e2",
            "b62c5704-1b1d-43b8-8c14-b1c38c2d6d1b",
            "0a05e836-2e6f-4914-89be-339c3838ca3f",
            "e319bdff-dd46-4a0a-b178-fb494080e5f6",
            "e3e31b71-2042-4e9b-af58-7866412c8d84",
            "6a4d0488-c969-4041-8541-ff1dffb79976",
            "250253a1-646d-4409-9ab2-52612e50b5db",
            "b0cd1db0-97b6-4525-863d-a94953871bde",
            "ac10c1c3-5331-4692-b826-14c2ff888fc9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
          "title": "endsWith",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\endsWith.test.js",
          "file": "\\test\\endsWith.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Return true if last character in string is same as is the target",
              "fullTitle": "endsWith Return true if last character in string is same as is the target",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('abc', 'c')).to.equal(true)",
              "err": {},
              "uuid": "d0800732-835d-45b6-90f7-e44e6bda978b",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return false if last character in string is not same as is the target",
              "fullTitle": "endsWith Return false if last character in string is not same as is the target",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('abc', 'b')).to.equal(false)",
              "err": {},
              "uuid": "5ec30e63-67e3-4f86-a857-1afba8982bfe",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return true if character in string is same as is the target in specified position",
              "fullTitle": "endsWith Return true if character in string is same as is the target in specified position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('abc', 'b', 2)).to.equal(true)",
              "err": {},
              "uuid": "5af2af73-ca0f-49aa-a94b-53031520a50f",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return true if multiple character in string is same as is the target that have multiple target in specified position",
              "fullTitle": "endsWith Return true if multiple character in string is same as is the target that have multiple target in specified position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('abc', 'bc', 3)).to.equal(true)",
              "err": {},
              "uuid": "f20f0c7a-4e5e-4279-806f-0454b1873400",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return false if character in string is not same as is the target in specified position",
              "fullTitle": "endsWith Return false if character in string is not same as is the target in specified position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('abc', 'b', 3)).to.equal(false)",
              "err": {},
              "uuid": "870cfa68-508b-468f-9e13-a405277e5bbe",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return false if position is negative",
              "fullTitle": "endsWith Return false if position is negative",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('abc', 'a', -1)).to.equal(false)",
              "err": {},
              "uuid": "e8f2aa31-d28f-4152-a246-28876ca46717",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return false if position is 0",
              "fullTitle": "endsWith Return false if position is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('abc', 'a', 0)).to.equal(false)",
              "err": {},
              "uuid": "6813a30f-4379-4c64-a4b1-a1f1f21ec5f2",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return error if string is null",
              "fullTitle": "endsWith Return error if string is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => endsWith(null, 'n', 1)).to.Throw()",
              "err": {},
              "uuid": "c00aea62-7ddb-4841-b07d-8c2e7370064b",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconize empty space",
              "fullTitle": "endsWith reconize empty space",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('a c', '', 2)).to.equal(true)",
              "err": {},
              "uuid": "84e9f16e-3c44-4c2b-8c3a-a694cf5787e3",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not reconize array characthers",
              "fullTitle": "endsWith should not reconize array characthers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith(['a', 'b', 'c'], 'b', 2)).to.equal(false)",
              "err": {
                "message": "AssertionError: expected true to equal false",
                "estack": "AssertionError: expected true to equal false\n    at Context.<anonymous> (file:///C:/Users/Eetu/Projects/COMP.SE.200-2024-2025-1/test/endsWith.test.js:33:50)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "55a1ef7b-4bb5-49f7-846e-b0fc68d174db",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not reconize array numbers",
              "fullTitle": "endsWith should not reconize array numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith([1, 2, 3], 2, 2)).to.equal(false)",
              "err": {},
              "uuid": "379ddd3f-89c1-47a1-80ac-d2ec281045d4",
              "parentUUID": "fc7df8b9-9c3b-408e-8f8b-57c20aface29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0800732-835d-45b6-90f7-e44e6bda978b",
            "5ec30e63-67e3-4f86-a857-1afba8982bfe",
            "5af2af73-ca0f-49aa-a94b-53031520a50f",
            "f20f0c7a-4e5e-4279-806f-0454b1873400",
            "870cfa68-508b-468f-9e13-a405277e5bbe",
            "e8f2aa31-d28f-4152-a246-28876ca46717",
            "6813a30f-4379-4c64-a4b1-a1f1f21ec5f2",
            "c00aea62-7ddb-4841-b07d-8c2e7370064b",
            "84e9f16e-3c44-4c2b-8c3a-a694cf5787e3",
            "379ddd3f-89c1-47a1-80ac-d2ec281045d4"
          ],
          "failures": [
            "55a1ef7b-4bb5-49f7-846e-b0fc68d174db"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e444d0e-2f77-457e-9c0b-40dff9a1d74c",
          "title": "eq",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\eq.test.js",
          "file": "\\test\\eq.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for equal values",
              "fullTitle": "eq should return true for equal values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(eq(1, 1)).to.equal(true);\nexpect(eq('abc', 'abc')).to.equal(true);\nexpect(eq(NaN, NaN)).to.equal(true);\nexpect(eq(null, null)).to.equal(true);\nexpect(eq(undefined, undefined)).to.equal(true);",
              "err": {},
              "uuid": "1e7cffff-8eee-4dbc-824b-ac7d1535e76f",
              "parentUUID": "3e444d0e-2f77-457e-9c0b-40dff9a1d74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for non-equal values",
              "fullTitle": "eq should return false for non-equal values",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(eq(1, 2)).to.equal(false);\nexpect(eq(1, 'abs')).to.equal(false);\nexpect(eq('abc', 'def')).to.equal(false);\nexpect(eq(NaN, 1)).to.equal(false);",
              "err": {},
              "uuid": "f96b38e3-ab9d-4702-8072-5589465457f1",
              "parentUUID": "3e444d0e-2f77-457e-9c0b-40dff9a1d74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for 1 and '1' in accordance with the ES standard",
              "fullTitle": "eq should return true for 1 and '1' in accordance with the ES standard",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(eq(1, '1')).to.equal(true);",
              "err": {},
              "uuid": "141f4497-109f-421f-a434-34526a9b5110",
              "parentUUID": "3e444d0e-2f77-457e-9c0b-40dff9a1d74c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e7cffff-8eee-4dbc-824b-ac7d1535e76f",
            "f96b38e3-ab9d-4702-8072-5589465457f1",
            "141f4497-109f-421f-a434-34526a9b5110"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb82e0da-f78e-40de-8a63-b25c6bcb62c9",
          "title": "every",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\every.test.js",
          "file": "\\test\\every.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns false if not all values are true",
              "fullTitle": "every returns false if not all values are true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(every([true, 1, null, 'yes'], Boolean)).to.equal(false)",
              "err": {},
              "uuid": "8b12db61-4c09-4a32-8a45-203bf2afb0e3",
              "parentUUID": "fb82e0da-f78e-40de-8a63-b25c6bcb62c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns true if all values are true",
              "fullTitle": "every returns true if all values are true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(every([true, 1, 'yes'], Boolean)).to.equal(true)",
              "err": {},
              "uuid": "9b9d3131-38d7-464c-91ac-f47c82653cba",
              "parentUUID": "fb82e0da-f78e-40de-8a63-b25c6bcb62c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns true for an empty array",
              "fullTitle": "every returns true for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(every([], Boolean)).to.equal(true);",
              "err": {},
              "uuid": "92295edb-d71e-4ba3-b659-0eab26c72546",
              "parentUUID": "fb82e0da-f78e-40de-8a63-b25c6bcb62c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "stops iteration once a false value is encountered",
              "fullTitle": "every stops iteration once a false value is encountered",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 0;\nconst predicate = (value) => {\n  count++;\n  return Boolean(value);\n}\nevery([true, false, true], predicate)\nexpect(count).to.equal(2)",
              "err": {},
              "uuid": "ed440c85-690a-4b10-9e18-0affadb8b7ef",
              "parentUUID": "fb82e0da-f78e-40de-8a63-b25c6bcb62c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b12db61-4c09-4a32-8a45-203bf2afb0e3",
            "9b9d3131-38d7-464c-91ac-f47c82653cba",
            "92295edb-d71e-4ba3-b659-0eab26c72546",
            "ed440c85-690a-4b10-9e18-0affadb8b7ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a53b2273-3f63-4e34-aff5-8dbb02558ac8",
          "title": "filter",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return objects for [\"barney\"]",
              "fullTitle": "filter should return objects for [\"barney\"]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred', 'active': false }\n];\nconst result = filter(users, ({ active }) => active);\nexpect(result).to.deep.equal([{ 'user': 'barney', 'active': true }]);",
              "err": {},
              "uuid": "3296fc66-86f6-41d1-b446-53fe45552394",
              "parentUUID": "a53b2273-3f63-4e34-aff5-8dbb02558ac8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the input is an empty array",
              "fullTitle": "filter should return an empty array when the input is an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [];\nconst result = filter(users, ({ active }) => active);\nexpect(result).to.deep.equal([[]]);",
              "err": {},
              "uuid": "465ac057-8ade-4382-9ada-9c9e38846d1d",
              "parentUUID": "a53b2273-3f63-4e34-aff5-8dbb02558ac8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the input is null",
              "fullTitle": "filter should return an empty array when the input is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = null;\nconst result = filter(users, ({ active }) => active);\nexpect(result).to.deep.equal([[]]);",
              "err": {},
              "uuid": "a4ab44f7-aa4e-496f-b5a6-c94d1b31fa2c",
              "parentUUID": "a53b2273-3f63-4e34-aff5-8dbb02558ac8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3296fc66-86f6-41d1-b446-53fe45552394",
            "465ac057-8ade-4382-9ada-9c9e38846d1d",
            "a4ab44f7-aa4e-496f-b5a6-c94d1b31fa2c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc4ece24-b81a-4f8c-accf-741b959ffe44",
          "title": "isBoolean",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\isBoolean.test.js",
          "file": "\\test\\isBoolean.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "recognizes true",
              "fullTitle": "isBoolean recognizes true",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isBoolean(true)).to.equal(true)",
              "err": {},
              "uuid": "78989486-dfa3-45b0-a0d3-5225da92c385",
              "parentUUID": "fc4ece24-b81a-4f8c-accf-741b959ffe44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recognizes false",
              "fullTitle": "isBoolean recognizes false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isBoolean(false)).to.equal(true)",
              "err": {},
              "uuid": "76d0ffd4-543e-446c-b2eb-cdc85254e717",
              "parentUUID": "fc4ece24-b81a-4f8c-accf-741b959ffe44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "doesn't recognize a truthy value",
              "fullTitle": "isBoolean doesn't recognize a truthy value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isBoolean(1)).to.equal(false)",
              "err": {},
              "uuid": "6fb98a57-9a0f-4d0a-8a31-058998f54ec7",
              "parentUUID": "fc4ece24-b81a-4f8c-accf-741b959ffe44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "doesn't recognize a string",
              "fullTitle": "isBoolean doesn't recognize a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isBoolean('true')).to.equal(false)",
              "err": {},
              "uuid": "162b6687-8795-41e9-a3eb-1752e8841679",
              "parentUUID": "fc4ece24-b81a-4f8c-accf-741b959ffe44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "doesn't recognize a falsy value",
              "fullTitle": "isBoolean doesn't recognize a falsy value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isBoolean(0)).to.equal(false)",
              "err": {},
              "uuid": "4bc47fc5-7f3c-4aa4-9118-93bf533761f6",
              "parentUUID": "fc4ece24-b81a-4f8c-accf-741b959ffe44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "doesn't recognize a string",
              "fullTitle": "isBoolean doesn't recognize a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isBoolean('false')).to.equal(false)",
              "err": {},
              "uuid": "fa697098-18aa-454a-9fd9-a15773e73e78",
              "parentUUID": "fc4ece24-b81a-4f8c-accf-741b959ffe44",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78989486-dfa3-45b0-a0d3-5225da92c385",
            "76d0ffd4-543e-446c-b2eb-cdc85254e717",
            "6fb98a57-9a0f-4d0a-8a31-058998f54ec7",
            "162b6687-8795-41e9-a3eb-1752e8841679",
            "4bc47fc5-7f3c-4aa4-9118-93bf533761f6",
            "fa697098-18aa-454a-9fd9-a15773e73e78"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8c91a02-ff19-4083-b260-90583a2e927d",
          "title": "isDate",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\isDate.test.js",
          "file": "\\test\\isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Recognize the new date as a date object",
              "fullTitle": "isDate Recognize the new date as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Date)).to.equal(true)",
              "err": {},
              "uuid": "47a89fac-f59c-43ba-9c41-c35e4ad08cde",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recognize the first date as a date object",
              "fullTitle": "isDate Recognize the first date as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Date(0))).to.equal(true)",
              "err": {},
              "uuid": "e78670d3-c6ab-45b1-a5cb-37041b292be8",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recognize the day before first date as a date object",
              "fullTitle": "isDate Recognize the day before first date as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Date(0 - 1))).to.equal(true)",
              "err": {},
              "uuid": "04e82aa1-cdab-49a8-8949-e6a5083e4b86",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recognize the last date as a date object",
              "fullTitle": "isDate Recognize the last date as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Date(8.64e15))).to.equal(true)",
              "err": {},
              "uuid": "5cebb8c2-120f-4780-a851-f2e8d0b834cc",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recognize the one day over last date as a date object",
              "fullTitle": "isDate Recognize the one day over last date as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Date(8.64e15 + 1))).to.equal(true)",
              "err": {},
              "uuid": "91680f57-4ca3-4b53-9ac3-e36437b055ea",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "does not recognize text of date as a date object",
              "fullTitle": "isDate does not recognize text of date as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate('Mon April 23 2012')).to.equal(false)",
              "err": {},
              "uuid": "3b0b9cb0-edb3-4ea2-9b17-f409f3facad2",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recognize invalid date as a date object",
              "fullTitle": "isDate Recognize invalid date as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidDate = new Date('invalid date')\nexpect(isDate(invalidDate)).to.equal(true)\nexpect(isNaN(invalidDate.getTime())).to.equal(true)",
              "err": {},
              "uuid": "ea3918b0-ae3a-4009-bbcc-0d1af3e2f715",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "does not recognize number as a date object",
              "fullTitle": "isDate does not recognize number as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(23.2012)).to.equal(false)",
              "err": {},
              "uuid": "5d31cb81-9a40-4b2f-9008-d7006543e0ec",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Does not recognize array as a date object",
              "fullTitle": "isDate Does not recognize array as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate([])).to.equal(false)",
              "err": {},
              "uuid": "a4ff3288-f447-40ec-91db-e8fbf1e8d324",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Does not recognize function as a date object",
              "fullTitle": "isDate Does not recognize function as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(() => {})).to.equal(false)",
              "err": {},
              "uuid": "dd27c6f2-cf9e-465b-807f-c1938aef1cc8",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Does not recognize null as a date object",
              "fullTitle": "isDate Does not recognize null as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.equal(false)",
              "err": {},
              "uuid": "de04a42f-279c-4be1-8115-8bccb94b3d02",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Does not recognize undefined as a date object",
              "fullTitle": "isDate Does not recognize undefined as a date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(undefined)).to.equal(false)",
              "err": {},
              "uuid": "78fe1189-1cc3-4c1d-8792-2510b7f50784",
              "parentUUID": "a8c91a02-ff19-4083-b260-90583a2e927d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47a89fac-f59c-43ba-9c41-c35e4ad08cde",
            "e78670d3-c6ab-45b1-a5cb-37041b292be8",
            "04e82aa1-cdab-49a8-8949-e6a5083e4b86",
            "5cebb8c2-120f-4780-a851-f2e8d0b834cc",
            "91680f57-4ca3-4b53-9ac3-e36437b055ea",
            "3b0b9cb0-edb3-4ea2-9b17-f409f3facad2",
            "ea3918b0-ae3a-4009-bbcc-0d1af3e2f715",
            "5d31cb81-9a40-4b2f-9008-d7006543e0ec",
            "a4ff3288-f447-40ec-91db-e8fbf1e8d324",
            "dd27c6f2-cf9e-465b-807f-c1938aef1cc8",
            "de04a42f-279c-4be1-8115-8bccb94b3d02",
            "78fe1189-1cc3-4c1d-8792-2510b7f50784"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
          "title": "isEmpty",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\isEmpty.test.js",
          "file": "\\test\\isEmpty.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for an empty array",
              "fullTitle": "isEmpty should return true for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([])).to.eql(true)",
              "err": {},
              "uuid": "e9be6ac8-123c-4b6b-ab6e-213a70ebc792",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for null",
              "fullTitle": "isEmpty should return true for null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(null)).to.eql(true)",
              "err": {},
              "uuid": "2b38a4b2-6021-4286-9ea0-85410402bf58",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for 1",
              "fullTitle": "isEmpty should return true for 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(1)).to.eql(true)",
              "err": {},
              "uuid": "d80b1184-5e66-4459-adf1-f2949e4ae0d3",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty object",
              "fullTitle": "isEmpty should return true for an empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty({})).to.eql(true)",
              "err": {},
              "uuid": "5498c4be-7d7f-44b5-a51e-e8aae042a9a8",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for [1, 2, 3]",
              "fullTitle": "isEmpty should return false for [1, 2, 3]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([1, 2, 3])).to.eql(false)",
              "err": {},
              "uuid": "0768747c-abad-4871-b12e-af98457e36c7",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for 'abc'",
              "fullTitle": "isEmpty should return false for 'abc'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('abc')).to.eql(false)",
              "err": {},
              "uuid": "f8f3ffbf-dffe-4611-b5ac-58cdea0c6c5d",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for {a: 1, b: 2, c: 3}",
              "fullTitle": "isEmpty should return false for {a: 1, b: 2, c: 3}",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty({ a: 1, b: 2, c: 3 })).to.eql(false)",
              "err": {},
              "uuid": "d31ef979-9ca0-4a51-a4a1-2f1ef3528a6f",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if map or set is empty",
              "fullTitle": "isEmpty should return true if map or set is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(new Map())).to.eql(true)\nexpect(isEmpty(new Set())).to.eql(true)",
              "err": {},
              "uuid": "0450fda2-9db5-4351-af04-18323b9a039e",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty prototype",
              "fullTitle": "isEmpty should return true for an empty prototype",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function Foo() { }\nexpect(isEmpty(Foo.prototype)).to.eql(true);",
              "err": {},
              "uuid": "c478315b-3dfd-4eeb-bdf7-6136954b264f",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a prototype with properties",
              "fullTitle": "isEmpty should return false for a prototype with properties",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function Foo() { }\nFoo.prototype.c = 3;\nexpect(isEmpty(Foo.prototype)).to.eql(false);",
              "err": {},
              "uuid": "a67bd37f-fed5-452d-8c29-add36cc065ae",
              "parentUUID": "f1e2789a-3fe1-41bb-8769-3cb51cfacb85",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9be6ac8-123c-4b6b-ab6e-213a70ebc792",
            "2b38a4b2-6021-4286-9ea0-85410402bf58",
            "d80b1184-5e66-4459-adf1-f2949e4ae0d3",
            "5498c4be-7d7f-44b5-a51e-e8aae042a9a8",
            "0768747c-abad-4871-b12e-af98457e36c7",
            "f8f3ffbf-dffe-4611-b5ac-58cdea0c6c5d",
            "d31ef979-9ca0-4a51-a4a1-2f1ef3528a6f",
            "0450fda2-9db5-4351-af04-18323b9a039e",
            "c478315b-3dfd-4eeb-bdf7-6136954b264f",
            "a67bd37f-fed5-452d-8c29-add36cc065ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
          "title": "isTypedArray",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\isTypedArray.test.js",
          "file": "\\test\\isTypedArray.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for Float64Array",
              "fullTitle": "isTypedArray should return true for Float64Array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isTypedArray(new Float64Array(2))).to.be.true;",
              "err": {},
              "uuid": "fb70e2d4-4791-46cf-9f27-c6c32a9ec1e1",
              "parentUUID": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for Int32Array",
              "fullTitle": "isTypedArray should return true for Int32Array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isTypedArray(new Int32Array(2))).to.be.true;",
              "err": {},
              "uuid": "10705dc4-f261-42ce-a2ab-aa555ef7fa05",
              "parentUUID": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for Uint8ClampedArray",
              "fullTitle": "isTypedArray should return true for Uint8ClampedArray",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isTypedArray(new Uint8ClampedArray(2))).to.be.true;",
              "err": {},
              "uuid": "1d0c7f39-9fe5-4de4-98e8-f683f0a4e05c",
              "parentUUID": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for Uint16Array",
              "fullTitle": "isTypedArray should return true for Uint16Array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isTypedArray(new Uint16Array(2))).to.be.true;",
              "err": {},
              "uuid": "11300b72-9bb5-4d05-b4a3-ee62a70a32ee",
              "parentUUID": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for ArrayBuffer",
              "fullTitle": "isTypedArray should return false for ArrayBuffer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isTypedArray(new ArrayBuffer(2))).to.be.false;",
              "err": {},
              "uuid": "ce1ad267-18e4-4434-a4ee-7530d65e4513",
              "parentUUID": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for regular arrays",
              "fullTitle": "isTypedArray should return false for regular arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isTypedArray([])).to.be.false;\nexpect(isTypedArray([1, 2, 3])).to.be.false;",
              "err": {},
              "uuid": "4e59ff6e-cc53-44ca-9670-7671a1f01c66",
              "parentUUID": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for undefined",
              "fullTitle": "isTypedArray should return false for undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isTypedArray(null)).to.be.false;\nexpect(isTypedArray(undefined)).to.be.false;",
              "err": {},
              "uuid": "f7f033bf-ce16-411e-9b60-db3f0fe075c1",
              "parentUUID": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for non-array values",
              "fullTitle": "isTypedArray should return false for non-array values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isTypedArray({})).to.be.false;\nexpect(isTypedArray(() => { })).to.be.false;\nexpect(isTypedArray(new Date())).to.be.false;\nexpect(isTypedArray('notarray')).to.be.false;\nexpect(isTypedArray(true)).to.be.false;",
              "err": {},
              "uuid": "aa546837-437c-4ad7-9381-932dcf71b55a",
              "parentUUID": "7f1336d1-1dd2-4e47-b972-4c0498d34a2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb70e2d4-4791-46cf-9f27-c6c32a9ec1e1",
            "10705dc4-f261-42ce-a2ab-aa555ef7fa05",
            "1d0c7f39-9fe5-4de4-98e8-f683f0a4e05c",
            "11300b72-9bb5-4d05-b4a3-ee62a70a32ee",
            "ce1ad267-18e4-4434-a4ee-7530d65e4513",
            "4e59ff6e-cc53-44ca-9670-7671a1f01c66",
            "f7f033bf-ce16-411e-9b60-db3f0fe075c1",
            "aa546837-437c-4ad7-9381-932dcf71b55a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6c1acbf0-5989-43da-8a2f-9f99cd07e3ed",
          "title": "map",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\map.test.js",
          "file": "\\test\\map.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should square the numbers in the array",
              "fullTitle": "map should square the numbers in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = map([4, 8], (n) => n * n);\nexpect(result).to.deep.equal([16, 64]);",
              "err": {},
              "uuid": "c7fddbcd-d159-4ff6-9813-cb1bd9ed7328",
              "parentUUID": "6c1acbf0-5989-43da-8a2f-9f99cd07e3ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when given an empty array",
              "fullTitle": "map should return an empty array when given an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = map([], (n) => n * n);\nexpect(result).to.deep.equal([]);",
              "err": {},
              "uuid": "0542430a-5a51-40a7-9aa5-9252a27a6b6c",
              "parentUUID": "6c1acbf0-5989-43da-8a2f-9f99cd07e3ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when given null",
              "fullTitle": "map should return an empty array when given null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = map(null, (n) => n * n);\nexpect(result).to.deep.equal([]);",
              "err": {},
              "uuid": "2f055087-376a-4af5-9375-73c8c8f79c5d",
              "parentUUID": "6c1acbf0-5989-43da-8a2f-9f99cd07e3ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7fddbcd-d159-4ff6-9813-cb1bd9ed7328",
            "0542430a-5a51-40a7-9aa5-9252a27a6b6c",
            "2f055087-376a-4af5-9375-73c8c8f79c5d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "01ccfcd3-6414-463f-93c9-8a3d2b91d1d4",
          "title": "memoize",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\memoize.test.js",
          "file": "\\test\\memoize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return [1, 2]",
              "fullTitle": "memoize should return [1, 2]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = values(object);\nexpect(result).to.deep.equal([1, 2]);",
              "err": {},
              "uuid": "d5574bfd-c1db-47c3-a3c1-20540983605d",
              "parentUUID": "01ccfcd3-6414-463f-93c9-8a3d2b91d1d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return [3, 4]",
              "fullTitle": "memoize should return [3, 4]",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = values(other);\nexpect(result).to.deep.equal([3, 4]);",
              "err": {},
              "uuid": "05469dc6-dfda-45b7-80c6-e54bf298d489",
              "parentUUID": "01ccfcd3-6414-463f-93c9-8a3d2b91d1d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when the input is not a function",
              "fullTitle": "memoize should throw an error when the input is not a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => memoize('string')).to.throw(TypeError);",
              "err": {},
              "uuid": "844de76c-0560-49e6-b070-ce97da99dfcb",
              "parentUUID": "01ccfcd3-6414-463f-93c9-8a3d2b91d1d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when the resolver is not a function",
              "fullTitle": "memoize should throw an error when the resolver is not a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => memoize(() => { }, 'string')).to.throw(TypeError);",
              "err": {},
              "uuid": "46cc53fc-113d-4f86-8fba-a174c5b95083",
              "parentUUID": "01ccfcd3-6414-463f-93c9-8a3d2b91d1d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "memozie function cache should have a key after memoize call",
              "fullTitle": "memoize memozie function cache should have a key after memoize call",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = values(object);\nexpect(values.cache.has(object)).to.equal(true);",
              "err": {},
              "uuid": "480c6aac-726b-44bb-827b-924807d4b6d7",
              "parentUUID": "01ccfcd3-6414-463f-93c9-8a3d2b91d1d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use the cache after the first call",
              "fullTitle": "memoize should use the cache after the first call",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let dynamic_object = { 'a': 1, 'b': 2 }\nexpect(values(dynamic_object)).to.deep.equal([1, 2]);\ndynamic_object.a = 2;\nexpect(values(dynamic_object)).to.deep.equal([1, 2]);",
              "err": {},
              "uuid": "1498fffd-3dac-4cdc-b18c-e9faafa0047d",
              "parentUUID": "01ccfcd3-6414-463f-93c9-8a3d2b91d1d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use resolver to generate cache key",
              "fullTitle": "memoize should use resolver to generate cache key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resolver = (...args) => args.join('-');\nconst memoizedSum = memoize(sum, resolver);\nexpect(memoizedSum(1, 2)).to.equal(3);\nexpect(memoizedSum.cache.has('1-2')).to.equal(true);",
              "err": {},
              "uuid": "9ca95c52-2806-4a3a-a848-8f0a3c97f8f0",
              "parentUUID": "01ccfcd3-6414-463f-93c9-8a3d2b91d1d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5574bfd-c1db-47c3-a3c1-20540983605d",
            "05469dc6-dfda-45b7-80c6-e54bf298d489",
            "844de76c-0560-49e6-b070-ce97da99dfcb",
            "46cc53fc-113d-4f86-8fba-a174c5b95083",
            "480c6aac-726b-44bb-827b-924807d4b6d7",
            "1498fffd-3dac-4cdc-b18c-e9faafa0047d",
            "9ca95c52-2806-4a3a-a848-8f0a3c97f8f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e06b92f4-6057-4798-9d37-abf6f952f7fc",
          "title": "reduce",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\reduce.test.js",
          "file": "\\test\\reduce.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 3",
              "fullTitle": "reduce should return 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2];\nconst result = reduce(array, (result, value, key) => result + value, 0);\nexpect(result).to.equal(3);",
              "err": {},
              "uuid": "be28ec86-c270-42a2-9dd0-700ba45c33ba",
              "parentUUID": "e06b92f4-6057-4798-9d37-abf6f952f7fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return { '1': ['a', 'c'], '2': ['b'] }",
              "fullTitle": "reduce should return { '1': ['a', 'c'], '2': ['b'] }",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1, 'b': 2, 'c': 1 };\nconst result = reduce(object, (result, value, key) => {\n  (result[value] || (result[value] = [])).push(key)\n  return result\n}, {})\nexpect(result).to.deep.equal({ '1': ['a', 'c'], '2': ['b'] });",
              "err": {},
              "uuid": "e7a91d39-b49d-4ebb-b227-df6c704c0f01",
              "parentUUID": "e06b92f4-6057-4798-9d37-abf6f952f7fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be28ec86-c270-42a2-9dd0-700ba45c33ba",
            "e7a91d39-b49d-4ebb-b227-df6c704c0f01"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b4e20449-4624-4a3b-b3a0-864bf80c8ff2",
          "title": "toFinite",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\toFinite.test.js",
          "file": "\\test\\toFinite.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 3.2",
              "fullTitle": "toFinite should return 3.2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toFinite(3.2)).to.eql(3.2)",
              "err": {},
              "uuid": "57084358-3c58-43c2-a48c-8bb63d81d7ec",
              "parentUUID": "b4e20449-4624-4a3b-b3a0-864bf80c8ff2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 5e-324",
              "fullTitle": "toFinite should return 5e-324",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toFinite(Number.MIN_VALUE)).to.eql(5e-324)",
              "err": {},
              "uuid": "0b28d2d9-6e98-4c9e-8d0f-dbce603d8512",
              "parentUUID": "b4e20449-4624-4a3b-b3a0-864bf80c8ff2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1.7976931348623157e+308",
              "fullTitle": "toFinite should return 1.7976931348623157e+308",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toFinite(Infinity)).to.eql(1.7976931348623157e+308)",
              "err": {},
              "uuid": "e78b7db1-1452-4efd-8708-5f043c603f7d",
              "parentUUID": "b4e20449-4624-4a3b-b3a0-864bf80c8ff2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 3.2",
              "fullTitle": "toFinite should return 3.2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toFinite(\"3.2\")).to.eql(3.2)",
              "err": {},
              "uuid": "86e3032e-812b-41b8-84ad-eee5db70ba97",
              "parentUUID": "b4e20449-4624-4a3b-b3a0-864bf80c8ff2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the max finite value for Infinity",
              "fullTitle": "toFinite should return the max finite value for Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toFinite(Infinity)).to.eql(1.7976931348623157e+308);\nexpect(toFinite(-Infinity)).to.eql(-1.7976931348623157e+308);",
              "err": {},
              "uuid": "06285cc5-f9b1-448b-95be-29395490bbf6",
              "parentUUID": "b4e20449-4624-4a3b-b3a0-864bf80c8ff2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for falsy values other than 0",
              "fullTitle": "toFinite should return 0 for falsy values other than 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toFinite(null)).to.eql(0);\nexpect(toFinite(undefined)).to.eql(0);\nexpect(toFinite(false)).to.eql(0);\nexpect(toFinite(NaN)).to.eql(0);\nexpect(toFinite(\"\")).to.eql(0);",
              "err": {},
              "uuid": "7ec4a5b5-b833-49d1-a79e-8746dab1b178",
              "parentUUID": "b4e20449-4624-4a3b-b3a0-864bf80c8ff2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "57084358-3c58-43c2-a48c-8bb63d81d7ec",
            "0b28d2d9-6e98-4c9e-8d0f-dbce603d8512",
            "e78b7db1-1452-4efd-8708-5f043c603f7d",
            "86e3032e-812b-41b8-84ad-eee5db70ba97",
            "06285cc5-f9b1-448b-95be-29395490bbf6",
            "7ec4a5b5-b833-49d1-a79e-8746dab1b178"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7d4168fd-1230-4d72-af60-e84195632202",
          "title": "toInteger",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\toInteger.test.js",
          "file": "\\test\\toInteger.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 3",
              "fullTitle": "toInteger should return 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toInteger(3.2)).to.eql(3)",
              "err": {},
              "uuid": "323b3e67-cbcc-4e68-8ebd-23224f1e6c09",
              "parentUUID": "7d4168fd-1230-4d72-af60-e84195632202",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0",
              "fullTitle": "toInteger should return 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toInteger(Number.MIN_VALUE)).to.eql(0)",
              "err": {},
              "uuid": "4b19a207-0ab1-42de-9dde-0cde558de1f8",
              "parentUUID": "7d4168fd-1230-4d72-af60-e84195632202",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1.7976931348623157e+308",
              "fullTitle": "toInteger should return 1.7976931348623157e+308",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toInteger(Infinity)).to.eql(1.7976931348623157e+308)",
              "err": {},
              "uuid": "c5dd8fb5-0484-46f8-b198-d2be6c7c9a40",
              "parentUUID": "7d4168fd-1230-4d72-af60-e84195632202",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 3",
              "fullTitle": "toInteger should return 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toInteger(\"3.2\")).to.eql",
              "err": {},
              "uuid": "92fcb4a5-afaa-44e7-8742-0134f6ee3ef0",
              "parentUUID": "7d4168fd-1230-4d72-af60-e84195632202",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "323b3e67-cbcc-4e68-8ebd-23224f1e6c09",
            "4b19a207-0ab1-42de-9dde-0cde558de1f8",
            "c5dd8fb5-0484-46f8-b198-d2be6c7c9a40",
            "92fcb4a5-afaa-44e7-8742-0134f6ee3ef0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b32c9a8e-4cdd-4588-892d-9c389ca21499",
          "title": "toNumber",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\toNumber.test.js",
          "file": "\\test\\toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a number when given a number",
              "fullTitle": "toNumber should return a number when given a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(-1)).to.equal(-1);\nexpect(toNumber(0)).to.equal(0);\nexpect(toNumber(3)).to.equal(3);\nexpect(toNumber(3.2)).to.equal(3.2);",
              "err": {},
              "uuid": "de337361-ec86-44db-93bd-abdb2510785c",
              "parentUUID": "b32c9a8e-4cdd-4588-892d-9c389ca21499",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a number when given a string",
              "fullTitle": "toNumber should return a number when given a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('-1')).to.equal(-1);\nexpect(toNumber('0')).to.equal(0);\nexpect(toNumber('3')).to.equal(3);\nexpect(toNumber('3.2')).to.equal(3.2);",
              "err": {},
              "uuid": "5d89b1a4-415e-458f-a5d3-f3572fcd2afd",
              "parentUUID": "b32c9a8e-4cdd-4588-892d-9c389ca21499",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN when given an object",
              "fullTitle": "toNumber should return NaN when given an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber({});\nexpect(result).to.be.NaN;",
              "err": {},
              "uuid": "7b299d97-f570-4aaa-a483-808c6324046d",
              "parentUUID": "b32c9a8e-4cdd-4588-892d-9c389ca21499",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN when given an function",
              "fullTitle": "toNumber should return NaN when given an function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber(() => { });\nexpect(result).to.be.NaN;",
              "err": {},
              "uuid": "e78127c3-bdd6-4723-9cfd-a52f3e2f0d9d",
              "parentUUID": "b32c9a8e-4cdd-4588-892d-9c389ca21499",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NAN when given a symbol",
              "fullTitle": "toNumber should return NAN when given a symbol",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber(Symbol());\nexpect(result).to.be.NaN;",
              "err": {},
              "uuid": "00383093-55d8-4765-aa3c-8e46ef387c79",
              "parentUUID": "b32c9a8e-4cdd-4588-892d-9c389ca21499",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN if given an non-number string",
              "fullTitle": "toNumber should return NaN if given an non-number string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('abc')).to.be.NaN;",
              "err": {},
              "uuid": "10e915f7-d815-4a08-b1ad-4f3e00b085d9",
              "parentUUID": "b32c9a8e-4cdd-4588-892d-9c389ca21499",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return -0 when given 0 according to the  IEEE 754 standard",
              "fullTitle": "toNumber should return -0 when given 0 according to the  IEEE 754 standard",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber('-0')).to.be.equal(-0);\nexpect(toNumber(-0)).to.be.equal(-0);",
              "err": {},
              "uuid": "44f4b43f-452d-4c95-92db-e8dc35de1600",
              "parentUUID": "b32c9a8e-4cdd-4588-892d-9c389ca21499",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de337361-ec86-44db-93bd-abdb2510785c",
            "5d89b1a4-415e-458f-a5d3-f3572fcd2afd",
            "7b299d97-f570-4aaa-a483-808c6324046d",
            "e78127c3-bdd6-4723-9cfd-a52f3e2f0d9d",
            "00383093-55d8-4765-aa3c-8e46ef387c79",
            "10e915f7-d815-4a08-b1ad-4f3e00b085d9",
            "44f4b43f-452d-4c95-92db-e8dc35de1600"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8d8ea167-fb3d-485b-a4f7-958e843aefb6",
          "title": "upperFirst",
          "fullFile": "C:\\Users\\Eetu\\Projects\\COMP.SE.200-2024-2025-1\\test\\upperFirst.test.js",
          "file": "\\test\\upperFirst.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Works on a single word",
              "fullTitle": "upperFirst Works on a single word",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('word')).to.equal('Word')",
              "err": {},
              "uuid": "cb885eca-68cf-4f36-b544-2c71818be2fc",
              "parentUUID": "8d8ea167-fb3d-485b-a4f7-958e843aefb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works on two words",
              "fullTitle": "upperFirst Works on two words",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('word word')).to.equal('Word word')",
              "err": {},
              "uuid": "d978c153-f256-41de-8eb3-5932174a0d34",
              "parentUUID": "8d8ea167-fb3d-485b-a4f7-958e843aefb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works on an uppercase Word",
              "fullTitle": "upperFirst Works on an uppercase Word",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('Word')).to.equal('Word')",
              "err": {},
              "uuid": "268829a9-408b-4ff3-895f-83abe8d1eaf0",
              "parentUUID": "8d8ea167-fb3d-485b-a4f7-958e843aefb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Works a non ascii character",
              "fullTitle": "upperFirst Works a non ascii character",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('ålesund')).to.equal('Ålesund')",
              "err": {},
              "uuid": "f91ccbeb-517e-4448-9cae-bc492a55ec84",
              "parentUUID": "8d8ea167-fb3d-485b-a4f7-958e843aefb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Does nothing for chinese characters",
              "fullTitle": "upperFirst Does nothing for chinese characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('裁判')).to.equal('裁判')",
              "err": {},
              "uuid": "2055d7a1-bb46-4af1-a7a1-31860e6106de",
              "parentUUID": "8d8ea167-fb3d-485b-a4f7-958e843aefb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Does nothing for numbers",
              "fullTitle": "upperFirst Does nothing for numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('42')).to.equal('42')",
              "err": {},
              "uuid": "d2ad082c-26cb-4cc4-8786-a2ba9f39ca02",
              "parentUUID": "8d8ea167-fb3d-485b-a4f7-958e843aefb6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb885eca-68cf-4f36-b544-2c71818be2fc",
            "d978c153-f256-41de-8eb3-5932174a0d34",
            "268829a9-408b-4ff3-895f-83abe8d1eaf0",
            "f91ccbeb-517e-4448-9cae-bc492a55ec84",
            "2055d7a1-bb46-4af1-a7a1-31860e6106de",
            "d2ad082c-26cb-4cc4-8786-a2ba9f39ca02"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs",
        "reportFilename": "index"
      },
      "version": "6.2.0"
    }
  }
}